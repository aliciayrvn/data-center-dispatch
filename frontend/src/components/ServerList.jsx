import React, { useEffect, useState } from 'react';
import { Table, Tag, Button, Space, Modal, message } from 'antd';
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, Legend } from 'recharts';
import API from '../api';

export default function ServerList() {
  const [servers, setServers] = useState([]);
  const [selectedServer, setSelectedServer] = useState(null);
  const [infoModalOpen, setInfoModalOpen] = useState(false);

  useEffect(() => {
    const fetchServers = async () => {
      try {
        const res = await API.get('/servers/');
        setServers(res.data);
      } catch (e) {
        setServers([
          { id: 1, name: 'Server-1', status: true, cpu_load: 23, ram_usage: 45, temperature: 60, ip: '192.168.1.10', os: 'Ubuntu 22.04', uptime: '5 –¥–Ω–µ–π' },
          { id: 2, name: 'Server-2', status: false, cpu_load: 0, ram_usage: 0, temperature: 0, ip: '192.168.1.11', os: 'Windows Server 2019', uptime: '‚Äî' },
          { id: 3, name: 'Server-3', status: true, cpu_load: 67, ram_usage: 80, temperature: 75, ip: '192.168.1.12', os: 'CentOS 8', uptime: '12 —á–∞—Å–æ–≤' },
        ]);
      }
    };
    fetchServers();
  }, []);

  const handlePowerOn = (id) => {
    setServers(servers.map(s => s.id === id ? { ...s, status: true } : s));
    message.success('–°–µ—Ä–≤–µ—Ä –≤–∫–ª—é—á—ë–Ω');
  };

  const handlePowerOff = (id) => {
    setServers(servers.map(s => s.id === id ? { ...s, status: false, cpu_load: 0, ram_usage: 0, temperature: 0 } : s));
    message.info('–°–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω');
  };

  const handleReboot = (id) => {
    message.loading({ content: '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...', key: 'reboot' });
    setTimeout(() => {
      message.success({ content: '–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω', key: 'reboot', duration: 2 });
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–±—Ä–æ—Å –Ω–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }, 1500);
  };

  const handleDelete = (id) => {
    Modal.confirm({
      title: '–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?',
      content: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä?',
      okText: '–£–¥–∞–ª–∏—Ç—å',
      okType: 'danger',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      onOk: () => {
        setServers(servers.filter(s => s.id !== id));
        message.warning('–°–µ—Ä–≤–µ—Ä —É–¥–∞–ª—ë–Ω');
      }
    });
  };

  const handleShowInfo = (server) => {
    setSelectedServer(server);
    setInfoModalOpen(true);
  };

  const columns = [
    {
      title: '–ò–º—è',
      dataIndex: 'name',
      key: 'name',
      render: (text) => (
        <span>
          <img
            src="/chest.png"
            alt="chest"
            style={{ width: 22, verticalAlign: 'middle', marginRight: 8 }}
          />
          {text}
        </span>
      ),
    },
    {
      title: 'IP',
      dataIndex: 'ip',
      key: 'ip',
    },
    {
      title: '–û–°',
      dataIndex: 'os',
      key: 'os',
    },
    {
      title: '–ê–ø—Ç–∞–π–º',
      dataIndex: 'uptime',
      key: 'uptime',
    },
    {
      title: '–°—Ç–∞—Ç—É—Å',
      dataIndex: 'status',
      key: 'status',
      render: status =>
        status ? <Tag color="green">üü¢ –í–∫–ª—é—á–µ–Ω</Tag> : <Tag color="red">üî¥ –í—ã–∫–ª—é—á–µ–Ω</Tag>,
    },
    {
      title: 'CPU (%)',
      dataIndex: 'cpu_load',
      key: 'cpu_load',
    },
    {
      title: 'RAM (%)',
      dataIndex: 'ram_usage',
      key: 'ram_usage',
    },
    {
      title: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)',
      dataIndex: 'temperature',
      key: 'temperature',
      render: (temperature) => (
        temperature > 0 ? `${temperature}¬∞C` : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
      ),
    },
    {
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      key: 'actions',
      render: (_, record) => (
        <Space>
          <Button size="small" onClick={() => handleShowInfo(record)}>
            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
          </Button>
          {record.status ? (
            <Button size="small" onClick={() => handlePowerOff(record.id)}>
              –í—ã–∫–ª—é—á–∏—Ç—å
            </Button>
          ) : (
            <Button size="small" type="primary" onClick={() => handlePowerOn(record.id)}>
              –í–∫–ª—é—á–∏—Ç—å
            </Button>
          )}
          <Button size="small" onClick={() => handleReboot(record.id)}>
            –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
          </Button>
          <Button size="small" danger onClick={() => handleDelete(record.id)}>
            –£–¥–∞–ª–∏—Ç—å
          </Button>
        </Space>
      ),
    },
  ];

  return (
    <div>
      <h2>üñ•Ô∏è –°–µ—Ä–≤–µ—Ä—ã</h2>
      <Table
        columns={columns}
        dataSource={servers}
        rowKey="id"
        pagination={false}
        bordered
        style={{ background: 'rgba(255,255,255,0.95)', borderRadius: 8 }}
      />
      <h3 style={{ marginTop: 32 }}>–ì—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤</h3>
      <ResponsiveContainer width="100%" height={250}>
        <BarChart data={servers}>
          <XAxis dataKey="name" />
          <YAxis />
          <Tooltip />
          <Legend />
          <Bar dataKey="cpu_load" fill="#1890ff" name="CPU (%)" />
          <Bar dataKey="ram_usage" fill="#52c41a" name="RAM (%)" />
          <Bar dataKey="temperature" fill="#faad14" name="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)" />
        </BarChart>
      </ResponsiveContainer>
      <Modal
        title={selectedServer ? `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ ${selectedServer.name}` : ''}
        open={infoModalOpen}
        onCancel={() => setInfoModalOpen(false)}
        footer={null}
      >
        {selectedServer && (
          <div>
            <p><b>IP-–∞–¥—Ä–µ—Å:</b> {selectedServer.ip}</p>
            <p><b>–û–°:</b> {selectedServer.os}</p>
            <p><b>–ê–ø—Ç–∞–π–º:</b> {selectedServer.uptime}</p>
            <p><b>CPU:</b> {selectedServer.cpu_load}%</p>
            <p><b>RAM:</b> {selectedServer.ram_usage}%</p>
            <p><b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {selectedServer.temperature > 0 ? `${selectedServer.temperature}¬∞C` : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}</p>
            <p><b>–°—Ç–∞—Ç—É—Å:</b> {selectedServer.status ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω'}</p>
          </div>
        )}
      </Modal>
    </div>
  );
}